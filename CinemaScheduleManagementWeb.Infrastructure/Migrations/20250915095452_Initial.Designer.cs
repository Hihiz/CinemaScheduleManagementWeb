// <auto-generated />
using System;
using CinemaScheduleManagementWeb.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace CinemaScheduleManagementWeb.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250915095452_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.HasPostgresEnum(modelBuilder, "FilmStatusEnum", new[] { "Active", "InActive" });
            NpgsqlModelBuilderExtensions.HasPostgresEnum(modelBuilder, "SessionStatusEnum", new[] { "Active", "Canceled" });
            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("CinemaScheduleManagementWeb.Domain.Entities.CinemaSettingEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasComment("PK.");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<TimeSpan>("CloseTime")
                        .HasColumnType("interval")
                        .HasComment("Время закрытия кинотеатра.");

                    b.Property<TimeSpan>("OpenTime")
                        .HasColumnType("interval")
                        .HasComment("Время открытия кинотеатра.");

                    b.HasKey("Id")
                        .HasName("CinemaSettins_pkey");

                    b.ToTable("CinemaSettings", t =>
                        {
                            t.HasComment("Таблица настроек работы кинотеатра.");
                        });
                });

            modelBuilder.Entity("CinemaScheduleManagementWeb.Domain.Entities.FilmEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasComment("PK.");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<short>("AgeLimit")
                        .HasColumnType("smallint")
                        .HasComment("Возрастное ограничение фильма.");

                    b.Property<int>("Duration")
                        .HasColumnType("integer")
                        .HasComment("Продолжительность фильма (в минутах).");

                    b.Property<string>("PosterUrl")
                        .HasColumnType("text")
                        .HasComment("Постер фильма.");

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text")
                        .HasDefaultValueSql("'Active'::\"FilmStatusEnum\"");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasComment("Наименование фильма.");

                    b.HasKey("Id")
                        .HasName("Films_pkey");

                    b.ToTable("Films", t =>
                        {
                            t.HasComment("Таблица фильмов.");
                        });
                });

            modelBuilder.Entity("CinemaScheduleManagementWeb.Domain.Entities.FilmGenreEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasComment("PK.");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("FilmId")
                        .HasColumnType("integer")
                        .HasComment("FK на Id фильма.");

                    b.Property<int>("GenreId")
                        .HasColumnType("integer")
                        .HasComment("FK на Id жанра.");

                    b.HasKey("Id")
                        .HasName("FilmGenres_pkey");

                    b.HasIndex(new[] { "FilmId" }, "IX_FilmGenres_FilmId");

                    b.HasIndex(new[] { "GenreId" }, "IX_FilmGenres_GenreId");

                    b.ToTable("FilmGenres", t =>
                        {
                            t.HasComment("Таблица жанров фильма.");
                        });
                });

            modelBuilder.Entity("CinemaScheduleManagementWeb.Domain.Entities.GenreEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasComment("PK.");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasComment("Наименование жанра.");

                    b.HasKey("Id")
                        .HasName("Genres_pkey");

                    b.ToTable("Genres", t =>
                        {
                            t.HasComment("Таблица жанров.");
                        });
                });

            modelBuilder.Entity("CinemaScheduleManagementWeb.Domain.Entities.HallEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasComment("PK.");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("TechBreak")
                        .HasColumnType("integer")
                        .HasComment("Время технического перерыва (в минутах).");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasComment("Наименование зала.");

                    b.Property<int>("TotalSeat")
                        .HasColumnType("integer")
                        .HasComment("Количество мест зала.");

                    b.HasKey("Id")
                        .HasName("Halls_pkey");

                    b.ToTable("Halls", t =>
                        {
                            t.HasComment("Таблица залов.");
                        });
                });

            modelBuilder.Entity("CinemaScheduleManagementWeb.Domain.Entities.SessionEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasComment("PK.");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("FilmId")
                        .HasColumnType("integer")
                        .HasComment("FK на Id фильма.");

                    b.Property<int>("HallId")
                        .HasColumnType("integer")
                        .HasComment("FK на Id зала.");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric")
                        .HasComment("Цена сеанса.");

                    b.Property<DateTime>("SessionEnd")
                        .HasColumnType("timestamp with time zone")
                        .HasComment("Время окончания сеанса.");

                    b.Property<DateTime>("SessionStart")
                        .HasColumnType("timestamp with time zone")
                        .HasComment("Время начала сеанса.");

                    b.Property<string>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text")
                        .HasDefaultValueSql("'Active'::\"SessionStatusEnum\"");

                    b.HasKey("Id")
                        .HasName("Sessions_pkey");

                    b.HasIndex(new[] { "FilmId" }, "IX_Sessions_FilmId");

                    b.HasIndex(new[] { "HallId" }, "IX_Sessions_HallId");

                    b.ToTable("Sessions", t =>
                        {
                            t.HasComment("Таблица сеансов.");
                        });
                });

            modelBuilder.Entity("CinemaScheduleManagementWeb.Domain.Entities.FilmGenreEntity", b =>
                {
                    b.HasOne("CinemaScheduleManagementWeb.Domain.Entities.FilmEntity", "FilmEntity")
                        .WithMany("FilmGenresEntity")
                        .HasForeignKey("FilmId")
                        .IsRequired()
                        .HasConstraintName("Fk_Films_Id");

                    b.HasOne("CinemaScheduleManagementWeb.Domain.Entities.GenreEntity", "GenreEntity")
                        .WithMany("FilmGenresEntity")
                        .HasForeignKey("GenreId")
                        .IsRequired()
                        .HasConstraintName("Fk_Genres_Id");

                    b.Navigation("FilmEntity");

                    b.Navigation("GenreEntity");
                });

            modelBuilder.Entity("CinemaScheduleManagementWeb.Domain.Entities.SessionEntity", b =>
                {
                    b.HasOne("CinemaScheduleManagementWeb.Domain.Entities.FilmEntity", "FilmEntity")
                        .WithMany("SessionsEntity")
                        .HasForeignKey("FilmId")
                        .IsRequired()
                        .HasConstraintName("Fk_Films_Id");

                    b.HasOne("CinemaScheduleManagementWeb.Domain.Entities.HallEntity", "HallEntity")
                        .WithMany("SessionsEntity")
                        .HasForeignKey("HallId")
                        .IsRequired()
                        .HasConstraintName("Fk_Halls_Id");

                    b.Navigation("FilmEntity");

                    b.Navigation("HallEntity");
                });

            modelBuilder.Entity("CinemaScheduleManagementWeb.Domain.Entities.FilmEntity", b =>
                {
                    b.Navigation("FilmGenresEntity");

                    b.Navigation("SessionsEntity");
                });

            modelBuilder.Entity("CinemaScheduleManagementWeb.Domain.Entities.GenreEntity", b =>
                {
                    b.Navigation("FilmGenresEntity");
                });

            modelBuilder.Entity("CinemaScheduleManagementWeb.Domain.Entities.HallEntity", b =>
                {
                    b.Navigation("SessionsEntity");
                });
#pragma warning restore 612, 618
        }
    }
}
